/*
 * Wazuh PolicyManager
 * Copyright (C) 2015, Wazuh Inc.
 * September 8, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#include "policyManager_test.h"

void PolicyManagerTest::SetUp()
{
    m_policyManager = std::make_unique<PolicyManager>();
};

void PolicyManagerTest::TearDown() {};

TEST_F(PolicyManagerTest, invalidConfigurationIDWithVD)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "feed-update-interval": "60m",
        "offline-url": "file:///var/algo.tar.gz"
      },
      "indexer": {
        "enabled": "no",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "user",
        "password": "pwd",
        "api_key": "",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": ""
        }
      }
    })")};
    EXPECT_THROW(m_policyManager->validateConfiguration(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, invalidConfigurationURLFeed)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "feed-update-interval": "60m",
        "offline-url": "www:///var/algo.tar.gz"
      },
      "indexer": {
        "enabled": "yes",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "user",
        "password": "pwd",
        "api_key": "",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": ""
        }
      }
    })")};
    EXPECT_THROW(m_policyManager->validateConfiguration(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, invalidConfigurationNegativeTime)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "feed-update-interval": "-10m",
        "offline-url": "http:///var/algo.tar.gz"
      },
      "indexer": {
        "enabled": "yes",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "user",
        "password": "pwd",
        "api_key": "",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": ""
        }
      }
    })")};
    EXPECT_THROW(m_policyManager->validateConfiguration(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, invalidConfigurationIDWithTypo)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "feed-update-interval": "60m",
        "offline-url": "file:///var/algo.tar.gz"
      },
      "indexer": {
        "enable": "yes",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "user",
        "password": "pwd",
        "api_key": "",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": ""
        }
      }
    })")};
    EXPECT_THROW(m_policyManager->validateConfiguration(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, invalidConfigurationVDWithTypo)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enable": "yes",
        "index-status": "yes",
        "feed-update-interval": "60m",
        "offline-url": "file:///var/algo.tar.gz"
      },
      "indexer": {
        "enabled": "yes",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "user",
        "password": "pwd",
        "api_key": "",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": ""
        }
      }
    })")};
    EXPECT_THROW(m_policyManager->validateConfiguration(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, invalidConfigurationVDWithoutIDStatus)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index": "yes",
        "feed-update-interval": "60m",
        "offline-url": "file:///var/algo.tar.gz"
      },
      "indexer": {
        "enabled": "yes",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "user",
        "password": "pwd",
        "api_key": "",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": ""
        }
      }
    })")};
    EXPECT_THROW(m_policyManager->validateConfiguration(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, validConfigurationCheckParameters)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "feed-update-interval": "60m",
        "offline-url": "file:///var/algo.tar.gz",
        "cti-url": "https://cti-url.com"
      },
      "indexer": {
        "enabled": "yes",
        "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
        "username": "ImGroot",
        "password": "MoreSecurePassword123",
        "api_key": "ABC123",
        "ssl": {
          "certificate_authorities": ["/var/ossec/"],
          "certificate": "cert",
          "key": "ItsASecret!"
        }
      }
    })")};
    EXPECT_NO_THROW(m_policyManager->initialize(configJson));

    EXPECT_TRUE(m_policyManager->isVulnerabilityDetectionEnabled());
    EXPECT_TRUE(m_policyManager->isIndexerEnabled());

    EXPECT_STREQ(m_policyManager->getFeedUrl().c_str(), "file:///var/algo.tar.gz");
    EXPECT_EQ(m_policyManager->getFeedUpdateTime(), 3600);

    EXPECT_EQ(m_policyManager->getHostList().count("http://10.2.20.2:9200"), 1);
    EXPECT_EQ(m_policyManager->getHostList().count("https://10.2.20.42:9200"), 1);

    EXPECT_STREQ(m_policyManager->getUsername().c_str(), "ImGroot");
    EXPECT_STREQ(m_policyManager->getPassword().c_str(), "MoreSecurePassword123");
    EXPECT_STREQ(m_policyManager->getApikey().c_str(), "ABC123");

    EXPECT_EQ(m_policyManager->getCAList().count("/var/ossec/"), 1);

    EXPECT_STREQ(m_policyManager->getCertificate().c_str(), "cert");
    EXPECT_STREQ(m_policyManager->getKey().c_str(), "ItsASecret!");

    EXPECT_STREQ(m_policyManager->getCTIUrl().c_str(), "https://cti-url.com");
    EXPECT_STREQ(
        m_policyManager->getUpdaterConfiguration().dump().c_str(),
        R"({"configData":{"apiParameters":{"itemsPerRequest":{"name":"limit","value":100},"offset":{"name":"offset","start":0,"step":100}},"compressionType":"raw","contentFileName":"api_file.json","contentSource":"cti-api","dataFormat":"json","databasePath":"queue/vd_updater/rocksdb","deleteDownloadedContent":true,"offset":0,"outputFolder":"/tmp/vd_updater","url":"https://cti-url.com","versionedContent":"cti-api"},"interval":3600,"ondemand":false,"topicName":"vulnerability_feed_manager"})");
}
TEST_F(PolicyManagerTest, validConfigurationDefaultValues)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "cti-url": "cti-url.com"
      },
      "indexer": {
        "enabled": "yes"
      }
    })")};

    m_policyManager->initialize(configJson);

    EXPECT_TRUE(m_policyManager->isVulnerabilityDetectionEnabled());
    EXPECT_TRUE(m_policyManager->isIndexerEnabled());

    EXPECT_EQ(m_policyManager->getFeedUpdateTime(), 3600);

    EXPECT_EQ(m_policyManager->getHostList().count("http://localhost:9200"), 1);

    EXPECT_STREQ(m_policyManager->getUsername().c_str(), "");
    EXPECT_STREQ(m_policyManager->getPassword().c_str(), "");
    EXPECT_STREQ(m_policyManager->getApikey().c_str(), "");
    EXPECT_STREQ(m_policyManager->getCertificate().c_str(), "");
    EXPECT_STREQ(m_policyManager->getKey().c_str(), "");
    EXPECT_EQ(m_policyManager->getCAList().size(), 0);
    EXPECT_EQ(m_policyManager->getCTIUrl(), "cti-url.com");
}

TEST_F(PolicyManagerTest, invalidConfigurationNoCTIUrl)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes"
      }
    })")};

    EXPECT_THROW(m_policyManager->initialize(configJson), std::runtime_error);
}

TEST_F(PolicyManagerTest, validConfigurationDefaultValuesNoIndexer)
{
    const auto& configJson {nlohmann::json::parse(R"({
      "vulnerability-detection": {
        "enabled": "yes",
        "index-status": "yes",
        "cti-url": "cti-url.com"
      }
    })")};

    m_policyManager->initialize(configJson);

    EXPECT_TRUE(m_policyManager->isVulnerabilityDetectionEnabled());
    EXPECT_FALSE(m_policyManager->isIndexerEnabled());

    EXPECT_EQ(m_policyManager->getFeedUpdateTime(), 3600);

    EXPECT_EQ(m_policyManager->getHostList().count("http://localhost:9200"), 0);
}
