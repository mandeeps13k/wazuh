/*
 * Wazuh storeRemediationsModel
 * Copyright (C) 2015, Wazuh Inc.
 * October 05, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _STORE_REMEDIATIONS_MODEL_HPP
#define _STORE_REMEDIATIONS_MODEL_HPP

#include "cve5_generated.h"
#include "loggerHelper.h"
#include "rocksDBWrapper.hpp"
#include "vulnerabilityRemediations_generated.h"
#include "vulnerabilityScanner.hpp"

using namespace NSVulnerabilityScanner;

/**
 * @brief StoreRemediationsModel class.
 *
 */
class StoreRemediationsModel final
{
public:
    /**
     * @brief Update Remediation Information in a RocksDB Database
     *
     * This function updates remediation information for a given vulnerability (CVE) in a RocksDB database.
     * It extracts remediation data from a provided FlatBuffers 'Entry' object which is the CVE5 object and stores it in
     * the database.
     * If no remediation data is available or an error occurs during the update process, it provides error messages.
     *
     * @param data Pointer to the 'Entry' object containing vulnerability and remediation information.
     * @param remediationsDatabase Reference to the RocksDBWrapper object representing the database.
     *
     * @note The 'Entry' object should conform to the specified cve5 schema, including nested structures.
     * @note The 'RocksDBWrapper' object should be properly initialized and connected to the target database.
     *
     * @details The function performs the following steps:
     * 1. Attempts to access remediation data for Windows from the 'Entry' object.
     * 2. If remediation data is not available (empty), it logs an error message and returns.
     * 3. Extracts the CVE identifier (CVE-ID) from the 'Entry' object.
     * 4. Iterates through the available remediation data for Windows:
     *    - Builds a FlatBuffers object containing the remediation information.
     *    - Serializes the FlatBuffers object into binary data.
     *    - Stores the binary data in the RocksDB database, using the CVE-ID as the key.
     * 5. If an exception occurs during this process, it logs an error message.
     *
     * @note This function assumes a specific data structure in the 'Entry' object, including nested objects.
     *       Ensure that the 'Entry' object conforms to the expected schema to avoid runtime errors.
     *
     * @see Entry - The data structure containing CVE and remediation information.
     * @see RocksDBWrapper - The utility class for interacting with RocksDB databases.
     */
    static void updateRemediation(const cve_v5::Entry* data, Utils::RocksDBWrapper& remediationsDatabase)
    {
        if (!(data->containers()->cna() && data->containers()->cna()->x_remediations()))
        {
            logError(WM_VULNSCAN_LOGTAG, "Field x_remediations not present.");
            return;
        }

        auto remediations = data->containers()->cna()->x_remediations()->windows();

        if (!remediations)
        {
            logError(WM_VULNSCAN_LOGTAG, "Empty remediations");
            return;
        }

        std::string key {data->cveMetadata()->cveId()->str()};

        std::for_each(remediations->begin(),
                      remediations->end(),
                      [&key, &remediationsDatabase](const cve_v5::Remediation* remediation)
                      {
                          auto updatesCve5 = remediation->anyOf();
                          if (!updatesCve5)
                          {
                              logError(WM_VULNSCAN_LOGTAG, "No updates available.");
                              return;
                          }
                          flatbuffers::FlatBufferBuilder builder;

                          std::vector<flatbuffers::Offset<flatbuffers::String>> updates_vec;

                          for (size_t idxUpdate = 0; idxUpdate < updatesCve5->size(); idxUpdate++)
                          {
                              updates_vec.emplace_back(builder.CreateString(updatesCve5->Get(idxUpdate)->c_str()));
                          }

                          auto updates = builder.CreateVector(updates_vec);
                          auto fbbRemediation = CreateRemediationInfo(builder, updates);
                          builder.Finish(fbbRemediation);

                          rocksdb::Slice value(reinterpret_cast<const char*>(builder.GetBufferPointer()),
                                               builder.GetSize());
                          remediationsDatabase.put(key, value);
                      });
    }
};

#endif // _STORE_REMEDIATIONS_MODEL_HPP
